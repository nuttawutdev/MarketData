
@model MarketData.Models.AdjustDetailViewModel

@{
    ViewData["Title"] = "Adjust Detail";
    Html.RenderPartial("_WarningModal");
    Html.RenderPartial("_SuccessModal");
    Html.RenderPartial("_FailedModal");
}


<h3 style="padding-left:20px;padding-right:20px">
    @ViewData["Title"]

</h3>

<hr />


<div class="row" style="overflow-x:auto;padding-left:20px;padding-right:20px">
    <div style="width: 100%; font-size: 13px;">

        <div class="row col-sm-12">

            <div class="col-sm-2">
                <label><b>Distribution Channel</b></label><br />
                <label>
                    @Model.channel
                </label>


            </div>

            <div class="col-sm-2">
                <label><b>Retailer Group</b></label><br />
                <label>
                    @Model.retailerGroup
                </label>


            </div>

            <div class="col-sm-2">
                <label><b>Department Store</b></label><br />
                <label>
                    @Model.departmentStore
                </label>
            </div>

            <div class="col-sm-1">
                <label><b>Year</b></label><br />
                <label>
                    @Model.year
                </label>
            </div>
            <div class="col-sm-1">
                <label><b>Month</b></label><br />
                <label>
                    @Model.month
                </label>
            </div>
            <div class="col-sm-1">
                <label><b>Week</b></label><br />
                <label>
                    @Model.week
                </label>
            </div>
            <div class="col-sm-1">
                <label><b>Universe</b></label><br />
                <label>
                    @Model.universe
                </label>


            </div>
            <div class="col-sm-1">
                <label><b>Status</b></label><br />
                <label>
                    @Model.status
                </label>
            </div>
        </div>
    </div>

</div>
<div style="overflow-x:auto; padding-top:30px;padding-left:20px;padding-right:20px">
    <div class="table-responsive table-sm">
        <div class="table-wrapper">
            <div style=" overflow-x: auto;">
                <input type="hidden" value="@Model.adjustDataID" id="adjustDataID" />
                <table class="table table-hover " id="tblDetails">
                </table>
            </div>
        </div>
    </div>

</div>
<div class="container-xl" style="overflow-x: auto; padding-top: 20px; padding-left: 20px; padding-right: 20px">


    <div style="padding-top: 20px; text-align:right">
        <button id="btnSave" class="btn btn-danger " type="button">Save</button>
        <button id="btnAdjust" class="btn btn-primary text-white" type="button">Adjust</button>
        <a href="Index" class="btn btn-outline-danger">Cancel</a>
    </div>

</div>
<script type="text/javascript">
    $(document).ready(function () {


        $("#container").removeClass("container");
        DrawTable();


        function DrawTable() {
        var model = @Html.Raw(Json.Serialize(Model));
        console.log(model)
        var lastYear = parseInt(model.year) - 1 + ' ' + model.month + ' week 4';
        console.log(lastYear)
        var titleTable = '<thead class="table-secondary">' +
            '    <th >Brand</th>' +
            '    <th >Amt. (' + lastYear+')</th>';

        for (var i = 0; i < model.brandDataColumn.length; i++) {
            titleTable += '    <th >' + model.brandDataColumn[i] + '</th>';
        }

        titleTable += '    <th >Admin-Amt.Sales</th>' +
            '    <th >Adj.Amt.Sales</th>' +
            '    <th >Adj.Whole Sales</th>' +
            '    <th >Rank</th>' +
            '    <th >SK (%)</th>' +
            '    <th >MU (%)</th>' +
            '    <th >FG (%)</th>' +
            '    <th >OT (%)</th>' +
            '    <th >Remark</th>' +
            '    <th >Growth (%)</th>' +
            '</tr></thead>';


        $('#tblDetails').empty();
            var rowTable = ' <tbody>';
            var rowTotal = '<tr class="table-secondary" > <td>Total</td>';
        for (var i = 0; i < model.data.length; i++) {

            var amountPreviousYear = model.data[i].amountPreviousYear == null ? "" : model.data[i].amountPreviousYear;

            rowTable += '<tr >' +
                '<td hidden class="brandID">' + model.data[i].brandID + '</td>' +
                '<td >' + model.data[i].brandName + '</td>' +
                '<td class="amountPreviousYear">' + amountPreviousYear + '</td>' +
                '<td hidden class="week">' + model.data[i].week + '</td>';

            rowTotal += '<td class="totalAmountPreviousYear"></td>';

            var brandKeyInAmount = model.data[i].brandKeyInAmount;
            Object.keys(brandKeyInAmount).forEach(function (key) {
                var valueBrandKeyInAmount = brandKeyInAmount[key] == null ? "" : brandKeyInAmount[key];
                var keyBrandKeyInAmount = key;

                rowTable += '<td data-id=' + keyBrandKeyInAmount + ' class="brandKeyInAmount">' + valueBrandKeyInAmount + '</td>';

                rowTotal += '<td data-id=' + keyBrandKeyInAmount + ' class="totalbrandKeyInAmount"></td>';

             var brandKeyInRank = model.data[i].brandKeyInRank;
            Object.keys(brandKeyInRank).forEach(function (keys) {
                var valueBrandKeyInRank = brandKeyInRank[keys] == null ? "" : brandKeyInRank[keys];
                var keyBrandKeyInRank = keys;

                if (keyBrandKeyInRank == keyBrandKeyInAmount) {
                    rowTable += '<td data-id=' + keyBrandKeyInRank + ' class="brandKeyInRank" >' + valueBrandKeyInRank + '</td>';

                    rowTotal += '<td></td>';

                }
            });
            });

            var adminAmountSale = model.data[i].adminAmountSale == null ? "" : model.data[i].adminAmountSale;
            var adjustAmountSale = model.data[i].adjustAmountSale == null ? "" : model.data[i].adjustAmountSale;
            var adjustWholeSale = model.data[i].adjustWholeSale == null ? "" : model.data[i].adjustWholeSale
            var rank = model.data[i].rank == null ? "" : model.data[i].rank;
            var sk = model.data[i].sk == null ? "" : model.data[i].sk;
            var mu = model.data[i].mu == null ? "" : model.data[i].mu;
            var fg = model.data[i].fg == null ? "" : model.data[i].fg;
            var ot = model.data[i].ot == null ? "" : model.data[i].ot;
            var remark = model.data[i].remark == null ? "" : model.data[i].remark;
            var percentGrowth = model.data[i].percentGrowth == null ? "" : model.data[i].percentGrowth;

            rowTable += '  <td class="adminAmountSale" >' + adminAmountSale + '</td>' +
                '  <td > <input data-id="adjustAmountSale" type="number" class="form-control input-sm checkInput adjustAmountSale " value=' + adjustAmountSale + '></td>' +
                '  <td > <input data-id="adjustWholeSale" type="number" class="form-control input-sm checkInput adjustWholeSale " value=' + adjustWholeSale + '></td>' +
                '  <td class="rank" >' + rank + '</td>' +
                '  <td > <input data-id="sk" type="number" class="form-control input-sm checkInput sk" value=' + sk + '></td>' +
                '  <td > <input data-id="mu" type="number" class="form-control input-sm checkInput mu" value=' + mu + '></td>' +
                '  <td > <input data-id="fg" type="number" class="form-control input-sm checkInput fg" value=' + fg + '></td>' +
                '  <td > <input data-id="ot" type="number" class="form-control input-sm checkInput ot" value=' + ot + '></td>' +
                '  <td class="remark">' + remark + '</td>' +
                '  <td class="percentGrowth" >' + percentGrowth + '</td>' +
                '</tr>';

            rowTotal += '<td class="totalAdminAmountSale"></td>' +
                '<td class="totalAdjustAmountSale"></td>' +
                '<td class="totalAdjustWholeSale"></td>' +
                '<td></td>' +
                '<td class="totalsk"></td>' +
                '<td class="totalmu"></td>' +
                '<td class="totalfg"></td>' +
                '<td class="totalot"></td>' +
                '<td></td>' +
                '<td class="percentGrowth"></td><tr/>';
        }

            $('#tblDetails').append(titleTable + rowTable + rowTotal+' </tbody>');

        }

        $('#btnSave').on('click', function (e) {
            save('btnSave');
        });

        $('#btnAdjust').on('click', function (e) {
            save('btnAdjust');
        });

        $(document).on('change', '.checkInput', function () {
            save('save');
        })


        $(document).on('change', '.adjustAmountSale', function () {
            var adjustAmountSale = isNaN(parseFloat($(this).val())) ? 0 : parseFloat($(this).val());
            var row = $(this).closest("tr");

            var amountPreviousYear = isNaN(parseFloat(row.find(".amountPreviousYear").text())) ? 0 : parseFloat(row.find(".amountPreviousYear").text());
            var percentGrowth = ((adjustAmountSale - amountPreviousYear) / amountPreviousYear) * 100;
            row.find(".percentGrowth").text(percentGrowth);
        })

        function save(type) {
            var frmdata = getDataFromTable();
            console.log(frmdata)
            if (validate_Sum_Percent(frmdata) &&
                validate_WholeSales(frmdata) &&
                validate_WholeSales_AmountSales(frmdata) &&
                validate_AmountSales_Lessthan_Previouse(frmdata)) {

                var urlAction = '';
                if (type == 'btnAdjust') {
                     urlAction = '@Url.Action("SubmitAdjustDataDetail", "Adjust")';
                } else {

                    urlAction = '@Url.Action("SaveAdjustDataDetail", "Adjust")';
                }

                //$("#blocker").show();
                $.ajax({
                    type: "POST",
                    url: urlAction,
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(frmdata),
                    datatype: "json",
                        success: function (data) {
                            $("#blocker").hide();

                            if (data.isSuccess) {
                                if (type != 'save'){
                                    $('#successModalHref').attr("href", "Index");
                                    $('#successModal').modal('show');                              
                                }

                            } else if (data.isDuplicated) {
                                $('#failedModal').modal('show');
                                $('#myModalFailedResult').text('Duplicate data!');
                            } else {
                                $('#failedModal').modal('show');
                                $('#myModalFailedResult').text(data.responseError != ""
                                    && data.responseError != null ? data.responseError : 'Save data failed');
                            }
                            $('#confirmID').val('');
                        $('#myModalFailedResult').val('');
                    },
                    error: function () {
                        //$("#blocker").hide();
                    }
                });
    }


        }

        function getDataFromTable(type) {
            var model = @Html.Raw(Json.Serialize(Model));
            var frmdata  = {};
            var memberDetails = new Array();
            var adjustDataID = $('#adjustDataID').val();

            console.log(model)

            $("#tblDetails TBODY TR").each(function (index, el) {
                var brandID = $(el).find(".brandID").text();
                for (var i = 0; i < model.data.length; i++) {
                    if ( model.data[i].brandID == brandID) {
                        var memberDetail = {};

                        var percentGrowth = $(el).find(".percentGrowth").text();
                        var sk = $(el).find(".sk").val();
                        var mu = $(el).find(".mu").val();
                        var fg = $(el).find(".fg").val();
                        var ot = $(el).find(".ot").val();
                        var adjustAmountSale = $(el).find(".adjustAmountSale").val();
                        var adjustWholeSale = $(el).find(".adjustWholeSale").val();

                        memberDetail.brandID =  model.data[i].brandID;
                        memberDetail.amountPreviousYear =  model.data[i].amountPreviousYear;
                        memberDetail.adminAmountSale =  model.data[i].adminAmountSale;
                        memberDetail.adjustAmountSale = adjustAmountSale ? parseFloat(adjustAmountSale) : null;
                        memberDetail.adjustWholeSale = adjustWholeSale ? parseFloat(adjustWholeSale) : null;
                        memberDetail.percentGrowth = percentGrowth ? parseFloat(percentGrowth) : null;
                        memberDetail.rank =  model.data[i].rank;
                        memberDetail.sk = sk ? parseFloat(sk.replace(/\,/g, "")) : null;
                        memberDetail.mu = mu ? parseFloat(mu.replace(/\,/g, "")) : null;
                        memberDetail.fg = fg ? parseFloat(fg.replace(/\,/g, "")) : null;
                        memberDetail.ot = ot ? parseFloat(ot.replace(/\,/g, "")) : null;
                        memberDetail.week =  model.data[i].week;
                        memberDetail.remark =  model.data[i].remark;
                        memberDetail.brandKeyInAmount =  model.data[i].brandKeyInAmount;
                        memberDetail.brandKeyInRank =  model.data[i].brandKeyInRank;
                        memberDetails.push(memberDetail);
                    }
                }

            });

              frmdata.adjustDataDetail = memberDetails;
              frmdata.adjustDataID = adjustDataID;
            //frmdata.userID = ;
            return frmdata;
        };

        function showWarningAlert(typeWarning) {
            var msg = '';
            switch (typeWarning) {
                case 'NullAmount':
                    msg = 'กรุณากรอกข้อมูล Amount sales และ Rank กรณีไม่กรอกข้อมูล กรุณาใส่เหตุผลในช่อง Remark';
                    break;
                case '100Percent':
                    msg = 'ค่ารวมของ SK, MU, FG, OT ต้องมีค่าเท่ากับ 100% เท่านั้น';
                    break;
                case 'NullWholeSales':
                    msg = 'การกรอกข้อมูลของ Week ที่ 4 จะต้องใส่ค่า Whole sales ของทุก Brand กรณีไม่มียอดขาย whole sales จะต้องใส่ค่าเป็น 0';
                    break;
                case 'NullWholeSales_AmountSales':
                    msg = 'Whole sales ต้องน้อยกว่า Amount Sales';
                    break;
                case 'DuplicateRank':
                    msg = 'Duplicate Rank!';
                    break;
                case 'IncorrectAmountRank':
                    msg = 'ข้อมูล Amount sales และ Rank ไม่สอดคล้องกัน';
                    break;
                case 'AmountSales_Lessthan_Previouse':
                    msg = 'ค่า Amount sales ต้องมากกว่า ค่า Amount sales ของ Rank ถัดไป'
                    break;
                default:
            }


            $('#warningModal').modal('show');

            $('#myModalWarningResult').text(msg);

        }

        function validate_Sum_Percent(data) {

            var validateData = data.adjustDataDetail.some(function (i) {
                var sk = isNaN(parseFloat(i.sk)) ? 0 : parseFloat(i.sk);
                var mu = isNaN(parseFloat(i.mu)) ? 0 : parseFloat(i.mu);
                var fg = isNaN(parseFloat(i.fg)) ? 0 : parseFloat(i.fg);
                var ot = isNaN(parseFloat(i.ot)) ? 0 : parseFloat(i.ot);

                var sum = sk + mu + fg + ot;
                return sum != 0 && sum != 100;
            })
            if (validateData) {
                showWarningAlert('100Percent');
                return 0;
            } else return 1;
        }

        function validate_WholeSales(data) {

            var validateData = data.adjustDataDetail.some(function (i) {
                return i.week == 4 && i.wholeSale == null
            })

            if (validateData) {
                showWarningAlert('NullWholeSales');
                return 0;
            } else return 1;
        }

        function validate_WholeSales_AmountSales(data) {

            var validateData = data.adjustDataDetail.some(function (i) {
                var adjustWholeSale = isNaN(parseFloat(i.adjustWholeSale)) ? 0 : parseFloat(i.adjustWholeSale);
                var adjustAmountSale = isNaN(parseFloat(i.adjustAmountSale)) ? 0 : parseFloat(i.adjustAmountSale);
                return adjustAmountSale < adjustWholeSale;
            })

            if (validateData) {
                showWarningAlert('NullWholeSales_AmountSales');
                return 0;
            } else return 1;
        }

        function validate_AmountSales_Lessthan_Previouse(data) {

            var orderByList = data.adjustDataDetail.sort(function (a, b) {
                return parseFloat(a.rank) - parseFloat(b.rank);
            });
            var validateData = false;
            for (var i = 0; i < orderByList.length; i++) {

                if (i != orderByList.length - 1) {
                    var adjustAmountSale = isNaN(parseFloat(data.adjustDataDetail[i].adjustAmountSale)) ? 0 : parseFloat(data.adjustDataDetail[i].adjustAmountSale);

                    var adjustAmountSaleNext = isNaN(parseFloat(data.adjustDataDetail[i + 1].adjustAmountSale)) ? 0 : parseFloat(data.adjustDataDetail[i+1].adjustAmountSale);
                    if (adjustAmountSale < adjustAmountSaleNext) {
                        validateData = true;
                        break;
                    }

                }
            }

            if (validateData) {
                showWarningAlert('AmountSales_Lessthan_Previouse');
                return 0;
            } else return 1;
        }
    });

</script>