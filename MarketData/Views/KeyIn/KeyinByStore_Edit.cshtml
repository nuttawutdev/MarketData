@model MarketData.Models.BAKeyInDetailViewModel

@{
    ViewData["Title"] = "บันทึกข้อมูลยอดขายรายร้านค้า";
    Html.RenderPartial("_WarningModal");
    Html.RenderPartial("_SuccessModal");
    Html.RenderPartial("_FailedModal");
}


<h3 style="padding-left:20px;padding-right:20px">
    @ViewData["Title"]

</h3>

<hr />

@if (Model.rejectReason != null)
{
    <div class="row" style="word-break:break-all;padding-left:35px;padding-right:35px;color:red">
        <p style="font-size: 14px;font-weight:bold;">เหตุผลที่ถูกปฏิเสธ : </p>
        <p style="font-size: 14px;word-break:break-all">
            @Model.rejectReason
        </p>
    </div>
}


<div class="row" style="overflow-x:auto;padding-left:20px;padding-right:20px">
    <div style="width: 100%; font-size: 13px;">

        <div class="row col-sm-12">

            <div class="col-sm-2">
                <label><b>Distribution Channel</b></label><br />
                <label>
                    @Model.channel
                </label>


            </div>

            <div class="col-sm-2">
                <label><b>Retailer Group</b></label><br />
                <label>
                    @Model.retailerGroup
                </label>


            </div>

            <div class="col-sm-2">
                <label><b>Department Store</b></label><br />
                <label>
                    @Model.departmentStore
                </label>
            </div>

            <div class="col-sm-1">
                <label><b>Brand</b></label><br />
                <label>
                    @Model.brand
                </label>
            </div>
            <div class="col-sm-1">
                <label><b>Year</b></label><br />
                <label>
                    @Model.year
                </label>
            </div>
            <div class="col-sm-1">
                <label><b>Month</b></label><br />
                <label>
                    @Model.month
                </label>
            </div>
            <div class="col-sm-1">
                <label><b>Week</b></label><br />
                <label>
                    @Model.week
                </label>
            </div>
            <div class="col-sm-1">
                <label><b>Universe</b></label><br />
                <label>
                    @Model.universe
                </label>


            </div>
            <div class="col-sm-1">
                <label><b>Status</b></label><br />
                <label>
                    @Model.status
                </label>
            </div>
        </div>
    </div>

</div>


<div class="container-xl" style="overflow-x:auto; padding-top:20px;padding-left:20px;padding-right:20px">
    <div class="table-responsive table-sm">
        <div class="table-wrapper">
            <div style=" overflow-x: auto;">
                <h6 class="text-danger">*หมายเหตุ : ข้อมูลจะบันทึกอัตโนมัติ เมื่อมีการเปลี่ยนแถวที่ทำการคีย์ข้อมูล</h6>
                <table class="table table-hover " id="tblDetails">
                    <thead class="table-secondary">
                        <tr class="row m-0">
                            @{
                                var titelPrevYear = "Amount Sales (" + (Convert.ToInt32(Model.year) - 1) + " " + Model.month + " week 4)";
                            }
                            <th class="col-2">Brand</th>
                            <th class="col-2">@titelPrevYear</th>
                            <th class="col-1">Rank</th>
                            <th class="col-1">Amount Sales</th>
                            <th class="col-1">Whole Sales</th>
                            <th class="col-1">SK (%)</th>
                            <th class="col-1">MU (%)</th>
                            <th class="col-1">FG (%)</th>
                            <th class="col-1">OT (%)</th>
                            <th class="col-1">Remark</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int dataindex = 1;
                            foreach (var item in Model.BAKeyInDetailList)
                            {
                                <tr class="row m-0" style="color: black; background: @( item.brandColor!="" && item.brandColor!=null && item.brandColor!="#ffffff"?item.brandColor:"" )">
                                    <td class="col-2 ID" hidden>@item.ID</td>
                                    <td class="col-2" hidden>@item.keyInID</td>
                                    <td class="col-2" hidden>@item.counterID</td>
                                    <td class="col-2" hidden>@item.departmentStoreID</td>
                                    <td class="col-2" hidden>@item.channelID</td>
                                    <td class="col-2" hidden>@item.year</td>
                                    <td class="col-2" hidden>@item.month</td>
                                    <td class="col-2" hidden>@item.week</td>
                                    <td class="col-2" hidden>@item.brandID</td>
                                    <td class="col-2">@item.brandName</td>
                                    <td class="col-2">@item.amountSalePreviousYear</td>
                                    <td class="col-1 d-inline-flex" style=" align-items:center"><input data-index=@dataindex data-id="rank" type="number" class="form-control input-sm rank checkInput" value="@item.rank"></td>
                                    <td class="col-1 d-inline-flex" style=" align-items:center"><input data-index=@dataindex data-id="amountSale" data-type="currency" type="text" class="form-control input-sm amountSale checkInput" value="@item.amountSale"></td>
                                    <td class="col-1 d-inline-flex" style=" align-items:center"><input data-index=@dataindex data-id="wholeSale" data-type="currency" type="text" class="form-control input-sm wholeSale checkInput" value="@item.wholeSale"></td>
                                    <td class="col-1 d-inline-flex" style=" align-items:center"><input data-index=@dataindex data-id="sk" data-type="currency" type="text" class="form-control input-sm sk checkInput" value="@item.sk"></td>
                                    <td class="col-1 d-inline-flex" style=" align-items:center"><input data-index=@dataindex data-id="mu" data-type="currency" type="text" class="form-control input-sm mu checkInput" value="@item.mu"></td>
                                    <td class="col-1 d-inline-flex" style=" align-items:center"><input data-index=@dataindex data-id="fg" data-type="currency" type="text" class="form-control input-sm fg checkInput" value="@item.fg"></td>
                                    <td class="col-1 d-inline-flex" style=" align-items:center"><input data-index=@dataindex data-id="ot" data-type="currency" type="text" class="form-control input-sm ot checkInput" value="@item.ot"></td>
                                    <td class="col-1 d-inline-flex" style=" align-items:center">
                                        @Html.DropDownListFor(c => item.remark, new SelectList(Model.remarkList, "remark", "remark"), "", new { id = "remarkList", @class = "form-control col-sm-12 remark" })
                                    </td>
                                </tr>
                                dataindex++;
                            }

                        }


                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div style="overflow-x: auto;">
        <div class="">
            <textarea class="form-control"
                      id="txtRemark"
                      style=" resize: none; display: block; margin-left: auto; margin-right: auto; padding-bottom: 20px;height:100px"
                      placeholder="ข้อมูลเพิ่มเติม">@Model.remark</textarea>
        </div>
    </div>
    <div class="modal-footer">
        @*<button id="btnSave" class="btn btn-danger " type="button">Save</button>*@
        <button id="btnSubmit" class="btn btn-primary text-white" type="button">Submit</button>
        <a href="KeyInByStore" class="btn btn-outline-danger">Cancel</a>

    </div>
</div>

<script type="text/javascript">

    $(document).ready(function () {
        var messageError = "";
        var rowClick = null;
        var editData = false;
        $("#blocker").hide();
        $("#container").removeClass("container");
        $('#btnSave').on('click', function (e) {
             save('save');
        });

        $('#btnSubmit').on('click', function (e) {
            save('submit');
        });


        $(document).on('change', '#remarkList', function (event) {
            save('autosave');
        });


        $('#tblDetails tbody').on('click', 'tr', function () {
            if (rowClick != ($(this).index()) && editData) {
                editData = false;
                save('autosave');
            }
            rowClick = ($(this).index());
        });

        $(document).on('keydown', '.checkInput', function (event) {
            editData = true;
            var keycode = (event.keyCode ? event.keyCode : event.which);

            if (keycode == '13') {
                save('autosave');
                var currentIndex = parseFloat($(event.target).attr('data-index'));
                var dataID = $(event.target).attr('data-id');
                rowClick = currentIndex + 1;
                $('input[data-index=' + (currentIndex + 1) + '][data-id=' + dataID + ']').focus();
            }
        })

       function save(type) {
            editData = false;
            var frmdata = getDataFromTable();
           var urlAction = '';

           if (type == 'save' || type == 'autosave') {
                urlAction = '@Url.Action("SaveBAKeyInDetail", "KeyIn")';
               @*if (validate_Sum_Percent(frmdata) && validate_WholeSales_AmountSales(frmdata) && validate_Rank_AmountSales(frmdata)) {
               //if (validate_Sum_Percent(frmdata) && validate_WholeSales_AmountSales(frmdata)) {
                   urlAction = '@Url.Action("SaveBAKeyInDetail", "KeyIn")';
               }*@
           }
           else {
               if (validate_AmountSale_Rank(frmdata) && validate_Sum_Percent(frmdata) && validate_WholeSales(frmdata) && validate_WholeSales_AmountSales(frmdata) && validate_Rank_AmountSales(frmdata)) {
                    urlAction = '@Url.Action("SubmitBAKeyInDetail", "KeyIn")';
               }
           }

           if (urlAction != '') {
                   $("#blocker").show();
                   $.ajax({
                    type: "POST",
                    url: urlAction,
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(frmdata),
                    datatype: "json",
                    success: function (data) {
                      $("#blocker").hide();
                        if (data.isSuccess) {
                            if (type != 'autosave') {
                                $('#successModalHref').attr("href", "KeyinByStore");
                                $('#successModal').modal('show');
                            }
                      } else if (data.isDuplicated) {
                          $('#failedModal').modal('show');
                          $('#myModalFailedResult').text('Duplicate data!');
                      } else {
                          $('#failedModal').modal('show');
                          $('#myModalFailedResult').text(data.responseError != ""
                              && data.responseError != null ? data.responseError : 'Save data failed');
                      }
                      $('#confirmID').val('');
                      $('#myModalFailedResult').val('');
                  },
                  error: function (xhr, status, error) {
                      var errorMessage = xhr.status + ': ' + xhr.statusText
                      $("#blocker").hide();
                      $('#failedModal').modal('show');
                      $('#myModalFailedResult').text(errorMessage);
                     }
                });
            }
        }

        function getDataFromTable(type){
            var model = @Html.Raw(Json.Serialize(Model));
            var frmdata  = {};
            var memberDetails = new Array();
            var bAKeyInID = '';

            $("#tblDetails TBODY TR").each(function () {
                var row = $(this);
                var memberDetail = {};
                var rank = row.find("TD").find(".rank").val();
                var amountSale = row.find("TD").find(".amountSale").val();
                var wholeSale = row.find("TD").find(".wholeSale").val();

                var sk = row.find("TD").find(".sk").val();
                var mu = row.find("TD").find(".mu").val();
                var fg = row.find("TD").find(".fg").val();
                var ot = row.find("TD").find(".ot").val();
                var amountSalePreviousYear = row.find("TD").eq(10).html();
                var week = row.find("TD").eq(7).html();
                var remark = row.find("TD").find(".remark option:selected").text();
                bAKeyInID = row.find("TD").eq(1).html()
                memberDetail.ID = row.find("TD").eq(0).html();
                memberDetail.keyInID = row.find("TD").eq(1).html();
                memberDetail.counterID = row.find("TD").eq(2).html();
                memberDetail.departmentStoreID = row.find("TD").eq(3).html();
                memberDetail.channelID = row.find("TD").eq(4).html();
                memberDetail.year = row.find("TD").eq(5).html();
                memberDetail.month = row.find("TD").eq(6).html();
                memberDetail.week = week;
                memberDetail.brandID = row.find("TD").eq(8).html();
                memberDetail.brandName = row.find("TD").eq(9).html();
                memberDetail.amountSalePreviousYear = amountSalePreviousYear ? parseFloat(amountSalePreviousYear) : null;
                memberDetail.rank = rank ? parseInt(rank) : null;
                memberDetail.amountSale = amountSale ? parseFloat(amountSale.replace(/\,/g, "")) : null;
                memberDetail.wholeSale = wholeSale ? parseFloat(wholeSale.replace(/\,/g, "")) : type == 'Submit' && week == 4 ? 0 : null;
                memberDetail.sk = sk ? parseFloat(sk.replace(/\,/g, "")) : null;
                memberDetail.mu = mu ? parseFloat(mu.replace(/\,/g, "")) : null;
                memberDetail.fg = fg ? parseFloat(fg.replace(/\,/g, "")) : null;
                memberDetail.ot = ot ? parseFloat(ot.replace(/\,/g, "")) : null;
                memberDetail.remark = remark;
                memberDetails.push(memberDetail);
            });

            frmdata.BAKeyInDetailList = memberDetails;
            frmdata.BAKeyInID = bAKeyInID;
            frmdata.userID = bAKeyInID;
            frmdata.remark = $('#txtRemark').val();
            return frmdata;
        };

        function validate_AmountSale_Rank(data) {
            for (var i = 0; i < data.BAKeyInDetailList.length; i++) {
                var detailData = data.BAKeyInDetailList[i];
                if ((detailData.amountSale == null && detailData.rank != null) ||
                    (detailData.amountSale != null && detailData.rank == null) ||
                    (detailData.amountSale == null && detailData.rank == null && detailData.remark == '')) {
                    messageError = "*Brand " + detailData.brandName + "*";
                    showWarningAlert('NullAmount');
                    return 0;
                }
            }

            return 1;
        }

        function validate_AmountSale_Rank_Save(data) {
            for (var i = 0; i < data.BAKeyInDetailList.length; i++) {
                var detailData = data.BAKeyInDetailList[i];
                if ((detailData.amountSale == null && detailData.rank != null) ||
                    (detailData.amountSale != null && detailData.rank == null)) {
                    messageError = "*Brand " + detailData.brandName + "*";
                    showWarningAlert('NullAmount');
                    return 0;
                }
            }

            return 1;
        }

        function validate_Sum_Percent(data) {

            for (var i = 0; i < data.BAKeyInDetailList.length; i++) {
                var detailData = data.BAKeyInDetailList[i];
                var sk = detailData.sk != null ? parseFloat(detailData.sk) : 0;
                var mu = detailData.mu != null ? parseFloat(detailData.mu) : 0;
                var fg = detailData.fg != null ? parseFloat(detailData.fg) : 0;
                var ot = detailData.ot != null ? parseFloat(detailData.ot) : 0;

                var sum = sk + mu + fg + ot;
                if (sum != 0 && sum != 100) {
                    messageError = "*Brand " + detailData.brandName + "*";
                    showWarningAlert('100Percent');
                    return 0;
                }
            }

            return 1;
        }


        function validate_WholeSales(data) {

            var week = data.BAKeyInDetailList[0].week;
            if (week == 4) {
                var dataHaveValue = data.BAKeyInDetailList.filter(c => c.amountSale > 0);
                for (var i = 0; i < dataHaveValue.length; i++) {
                    if (dataHaveValue[i].wholeSale == null) {
                        messageError = "*Brand " + dataHaveValue[i].brandName + "*";
                        showWarningAlert('NullWholeSales');
                        return 0;
                    }
                }
            }

            return 1;
        }

        function validate_WholeSales_AmountSales(data) {

            var dataHaveValue = data.BAKeyInDetailList.filter(c => c.amountSale > 0 && c.wholeSale > 0);
            for (var i = 0; i < dataHaveValue.length; i++) {
                var dataValidate = dataHaveValue[i];
                if (dataValidate.amountSale < dataValidate.wholeSale) {
                    messageError = "*Brand " + dataValidate.brandName + "*";
                    showWarningAlert('NullWholeSales_AmountSales');
                    return 0;
                }
            }

            return 1;
        }

        function validate_Rank_AmountSales(data) {
            var number = 0;
            var duplicateRank = false;
            var sortRank = data.BAKeyInDetailList.filter(c => c.rank != null).sort((a, b) => (a.rank > b.rank) ? 1 : -1)
            for (var i = 0; i < sortRank.length; i++) {
                if (sortRank[i].rank != null && sortRank[i].rank != '' && number == sortRank[i].rank) {
                    duplicateRank = true;
                    var rankDuplicate = sortRank.find(c => c.rank == number);
                    messageError = "*Brand " + sortRank[i].brandName + " และ Brand " + rankDuplicate.brandName+"*";
                    break;
                } else {
                    number = sortRank[i].rank
                }
            }

            if (duplicateRank) {
                showWarningAlert('DuplicateRank', messageError);
                return 0;
            }

            var inCorrectAmountRank = false;
            for (var i = 0; i < sortRank.length; i++) {
                if (sortRank[i].amountSale != null && sortRank[i].rank != null) {
                    if (sortRank[i + 1] != null) {
                        if (sortRank[i].amountSale > sortRank[i + 1].amountSale) {
                        } else {
                            messageError = "ค่า Amount Sales ของ Brand " + sortRank[i].brandName + " ควรมากกว่าค่า Amount Sales ของ Brand " + sortRank[i + 1].brandName;
                            inCorrectAmountRank = true;
                            break;
                        }
                    }
                }
            }
            if (inCorrectAmountRank) {
                showWarningAlert('IncorrectAmountRank', messageError);
                return 0;
            } else {
                return 1;
            }

        }

        function showWarningAlert(typeWarning) {
            var msg = '';
            switch (typeWarning) {
                case 'NullAmount':
                    msg = 'กรุณากรอกข้อมูล Amount sales และ Rank กรณีไม่มีข้อมูล กรุณาเลือกหตุผลในช่อง Remark เพียงอย่างเดียว';
                    break;
                case '100Percent':
                    msg = 'ค่ารวมของ SK, MU, FG, OT ต้องมีค่าเท่ากับ 100%';
                    break;
                case 'NullWholeSales':
                    msg = 'การกรอกข้อมูลของ Week ที่ 4 จะต้องใส่ค่า Whole sales กรณีไม่มียอดขาย whole sales จะต้องใส่ค่าเป็น 0';
                    break;
                case 'NullWholeSales_AmountSales':
                    msg = 'Whole sales ต้องน้อยกว่า Amount Sales';
                    break;
                case 'DuplicateRank':
                    msg = 'Duplicate Rank!';
                    break;
                case 'IncorrectAmountRank':
                    msg = 'ข้อมูล Amount sales และ Rank ไม่สอดคล้องกัน';
                    break;
                default:
            }


            $('#warningModal').modal('show');

            $('#myModalWarningResult').text(msg);
            $('#myModalWarningMessage').text(messageError);
            messageError = "";
        }

        $("input[data-type='currency']").keyup(function (e) {
            formatCurrency($(this));
        })


        function formatNumber(n) {
            // format number 1000000 to 1,234,567
            return n.replace(/\D/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ",")
        }

        function formatCurrency(input, blur) {
            // appends $ to value, validates decimal side
            // and puts cursor back in right position.

            // get input value
            var input_val = input.val();

            // don't validate empty input
            if (input_val === "") { return; }

            // original length
            var original_len = input_val.length;

            // initial caret position
            var caret_pos = input.prop("selectionStart");

            // check for decimal
            if (input_val.indexOf(".") >= 0) {

                // get position of first decimal
                // this prevents multiple decimals from
                // being entered
                var decimal_pos = input_val.indexOf(".");

                // split number by decimal point
                var left_side = input_val.substring(0, decimal_pos);
                var right_side = input_val.substring(decimal_pos);

                // add commas to left side of number
                left_side = formatNumber(left_side);

                // validate right side
                right_side = formatNumber(right_side);

                // On blur make sure 2 numbers after decimal
                if (blur === "blur") {
                    //right_side += "00";
                }

                // Limit decimal to only 2 digits
                right_side = right_side.substring(0, 2);

                // join number by .
                input_val = left_side + "." + right_side;

            } else {
                // no decimal entered
                // add commas to number
                // remove all non-digits
                input_val = formatNumber(input_val);
                input_val = input_val;

                // final formatting
                if (blur === "blur") {
                    //input_val += ".00";
                }
            }

            // send updated string to input
            input.val(input_val);

            // put caret back in the right position
            var updated_len = input_val.length;
            caret_pos = updated_len - original_len + caret_pos;
            input[0].setSelectionRange(caret_pos, caret_pos);
        }

    });
</script>